// –¢–µ—Å—Ç—ã –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
class AsyncTests {
    constructor() {
        this.tests = [];
        this.results = [];
    }

    describe(name, fn) {
        this.tests.push({ name, fn });
    }

    async run() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...\n');
        
        for (const test of this.tests) {
            try {
                await test.fn();
                console.log(`‚úì ${test.name}`);
                this.results.push({ name: test.name, status: 'passed' });
            } catch (error) {
                console.log(`‚úó ${test.name}`);
                console.log(`  –û—à–∏–±–∫–∞: ${error.message}`);
                this.results.push({ name: test.name, status: 'failed', error: error.message });
            }
        }
        
        this.printSummary();
    }

    printSummary() {
        console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
        const passed = this.results.filter(r => r.status === 'passed').length;
        const failed = this.results.filter(r => r.status === 'failed').length;
        
        console.log(`‚úì –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`);
        console.log(`‚úó –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
        console.log(`üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${passed}/${this.tests.length}`);
        
        if (failed > 0) {
            console.log('\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–æ–∫:');
            this.results.filter(r => r.status === 'failed').forEach(test => {
                console.log(`  - ${test.name}: ${test.error}`);
            });
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    expect(value) {
        return {
            toBe: (expected) => {
                if (value !== expected) {
                    throw new Error(`–û–∂–∏–¥–∞–ª–æ—Å—å ${expected}, –ø–æ–ª—É—á–µ–Ω–æ ${value}`);
                }
            },
            toBeGreaterThan: (min) => {
                if (value <= min) {
                    throw new Error(`–û–∂–∏–¥–∞–ª–æ—Å—å –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ ${min}, –ø–æ–ª—É—á–µ–Ω–æ ${value}`);
                }
            },
            toBeLessThan: (max) => {
                if (value >= max) {
                    throw new Error(`–û–∂–∏–¥–∞–ª–æ—Å—å –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ ${max}, –ø–æ–ª—É—á–µ–Ω–æ ${value}`);
                }
            },
            toContain: (item) => {
                if (!value.includes(item)) {
                    throw new Error(`–û–∂–∏–¥–∞–ª–æ—Å—å, —á—Ç–æ –º–∞—Å—Å–∏–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç ${item}`);
                }
            }
        };
    }

    async testAsyncOperation(operation, timeout = 5000) {
        return Promise.race([
            operation(),
            new Promise((_, reject) => 
                setTimeout(() => reject(new Error('–¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏')), timeout)
            )
        ]);
    }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ—Å—Ç–æ–≤
const tests = new AsyncTests();

// –¢–µ—Å—Ç—ã –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –ø—Ä–æ–º–∏—Å–æ–≤
tests.describe('createBasicPromise –¥–æ–ª–∂–µ–Ω —Ä–∞–∑—Ä–µ—à–∞—Ç—å—Å—è –ø—Ä–∏ shouldResolve=true', async () => {
    const result = await tests.testAsyncOperation(() => createBasicPromise(true));
    tests.expect(result).toContain('–£—Å–ø–µ—Ö');
});

tests.describe('createBasicPromise –¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω—è—Ç—å—Å—è –ø—Ä–∏ shouldResolve=false', async () => {
    try {
        await tests.testAsyncOperation(() => createBasicPromise(false));
        throw new Error('–ü—Ä–æ–º–∏—Å –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω');
    } catch (error) {
        tests.expect(error).toContain('–û—à–∏–±–∫–∞');
    }
});

// –¢–µ—Å—Ç—ã –¥–ª—è –∑–∞–¥–µ—Ä–∂–µ–∫
tests.describe('delayWithPromise –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É', async () => {
    const startTime = Date.now();
    await tests.testAsyncOperation(() => delayWithPromise(100));
    const duration = Date.now() - startTime;
    tests.expect(duration).toBeGreaterThan(90);
    tests.expect(duration).toBeLessThan(200);
});

// –¢–µ—Å—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
tests.describe('fetchUsers –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', async () => {
    // –ú–æ–∫–∞–µ–º fetch –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    const originalFetch = window.fetch;
    window.fetch = jest.fn(() => 
        Promise.resolve({
            ok: true,
            json: () => Promise.resolve([{ id: 1, name: 'Test User' }])
        })
    );

    try {
        await tests.testAsyncOperation(fetchUsers);
        // –ï—Å–ª–∏ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –æ—à–∏–±–∫–∏, —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω
    } finally {
        window.fetch = originalFetch;
    }
});

// –¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
tests.describe('retryWithBackoff –¥–æ–ª–∂–µ–Ω –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ–ø—ã—Ç–∫–∏', async () => {
    let attempts = 0;
    const failingOperation = () => {
        attempts++;
        if (attempts < 3) {
            return Promise.reject('–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
        return Promise.resolve('–£—Å–ø–µ—Ö');
    };

    const result = await tests.testAsyncOperation(() => retryWithBackoff(failingOperation, 3));
    tests.expect(result).toBe('–£—Å–ø–µ—Ö');
    tests.expect(attempts).toBe(3);
});

// –¢–µ—Å—Ç—ã –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
tests.describe('Promise.all –¥–æ–ª–∂–µ–Ω –∂–¥–∞—Ç—å –≤—Å–µ –ø—Ä–æ–º–∏—Å—ã', async () => {
    const startTime = Date.now();
    const promises = [
        delayWithPromise(100),
        delayWithPromise(50),
        delayWithPromise(75)
    ];
    
    await tests.testAsyncOperation(() => Promise.all(promises));
    const duration = Date.now() - startTime;
    tests.expect(duration).toBeGreaterThan(90);
});

tests.describe('Promise.race –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–µ—Ä–≤—ã–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π', async () => {
    const promises = [
        delayWithPromise(100).then(() => '–º–µ–¥–ª–µ–Ω–Ω—ã–π'),
        delayWithPromise(10).then(() => '–±—ã—Å—Ç—Ä—ã–π')
    ];
    
    const result = await tests.testAsyncOperation(() => Promise.race(promises));
    tests.expect(result).toBe('–±—ã—Å—Ç—Ä—ã–π');
});

// –¢–µ—Å—Ç—ã –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
tests.describe('createRequestCache –¥–æ–ª–∂–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã', async () => {
    let fetchCount = 0;
    const originalFetch = window.fetch;
    
    window.fetch = jest.fn(() => {
        fetchCount++;
        return Promise.resolve({
            ok: true,
            json: () => Promise.resolve({ data: 'test' })
        });
    });

    try {
        const cachedRequest = createRequestCache();
        const url = 'https://example.com/data';
        
        // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
        await tests.testAsyncOperation(() => cachedRequest(url));
        
        // –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ –∫—ç—à–∞
        await tests.testAsyncOperation(() => cachedRequest(url));
        
        tests.expect(fetchCount).toBe(1);
    } finally {
        window.fetch = originalFetch;
    }
});

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
    const testButton = document.createElement('button');
    testButton.textContent = '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã';
    testButton.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 10px 20px;
        background-color: #27ae60;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        z-index: 1000;
    `;
    
    testButton.addEventListener('click', () => {
        tests.run();
    });
    
    document.body.appendChild(testButton);
});

// Mock —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Jest (–µ—Å–ª–∏ Jest –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω)
if (typeof jest === 'undefined') {
    window.jest = {
        fn: (implementation) => implementation || (() => {})
    };
}

console.log('üß™ –¢–µ—Å—Ç—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã" –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É.');