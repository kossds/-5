1. Flexbox основное свойство
Свойство display: flex превращает контейнер в flex-контейнер. Дочерние элементы автоматически становятся flex-элементами и выстраиваются вдоль основной оси. Это позволяет легко управлять расположением и выравниванием элементов. Flexbox обеспечивает гибкое распределение пространства между элементами.

2. Разница между justify-content и align-items
justify-content выравнивает элементы вдоль основной оси (горизонтально по умолчанию). align-items выравнивает элементы вдоль поперечной оси (вертикально по умолчанию). Первое управляет распределением пространства между элементами, второе - их взаимным расположением в перпендикулярном направлении. Оба свойства работают только внутри flex-контейнера.

3. Свойство flex-direction
Оно определяет направление основной оси и расположение элементов. Значения row и row-reverse располагают элементы горизонтально, column и column-reverse - вертикально. От выбранного направления зависит работа justify-content и align-items. Это фундаментальное свойство, задающее основную логику расположения контента.

4. Сокращенная запись flex: 1
flex: 1 означает, что элемент может свободно растягиваться и сжиматься. Это сокращение для flex-grow: 1, flex-shrink: 1 и flex-basis: 0. Элемент займет доступное пространство в контейнере пропорционально другим элементам. Такая запись часто используется для создания гибких адаптивных layouts.

5. Свойство flex-wrap
Оно контролирует перенос элементов на новую строку при нехватке места. Без переноса элементы могут бесконечно сжиматься, что часто нежелательно. С включенным переносом макет становится более адаптивным к разным размерам экрана. Это особенно полезно в мобильной верстке.

6. Отличие align-content от align-items
align-items работает с элементами внутри одной строки, а align-content - с несколькими строками. Первое выравнивает элементы по поперечной оси в своей строке, второе - распределяет сами строки. align-content активен только при наличии нескольких строк, когда включен flex-wrap.

7. Свойство order
Оно меняет порядок отображения элементов без изменения HTML-структуры. Элементы сортируются согласно числовому значению order от меньшего к большему. Это полезно для адаптивного дизайна, когда на разных устройствах нужен разный порядок элементов. Однако злоупотребление может ухудшить доступность.

8. Основная и поперечная оси
Основная ось задается flex-direction и определяет главное направление элементов. Поперечная ось перпендикулярна основной. При смене направления оси автоматически меняются местами. Понимание осей критически важно для правильного использования выравнивающих свойств.

9. Адаптивный макет без медиа-запросов
Комбинация flex-wrap и гибких flex-значений создает адаптивность. Элементы автоматически переносятся и меняют размер при изменении контейнера. Минимальные ширины предотвращают чрезмерное сжатие контента. Такой подход часто достаточен для простой адаптивности.

10. Преимущества gap перед margins
Gap создает равномерные промежутки между всеми элементами автоматически. Не нужно обнулять margins у крайних элементов или использовать сложные селекторы. Отступы получаются симметричными и предсказуемыми. Это значительно упрощает код и его поддержку.