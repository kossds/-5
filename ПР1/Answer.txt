1. Три основные области работы с файлами в Git и их отличия:
Рабочая папка (Working Directory): Это ваша локальная папка на компьютере, где вы непосредственно создаете и редактируете файлы. Изменения здесь еще не отслеживаются Git для следующего коммита.
Индекс (Index) или Область подготовленных файлов (Staging Area): Это промежуточная область, где вы собираете изменения, которые хотите включить в следующий коммит. Команда git add добавляет изменения из рабочей папки в индекс.
Репозиторий (Repository): Это база данных Git, где хранятся все ваши коммиты и история проекта. Команда git commit permanently сохраняет изменения из индекса в репозиторий.
2. Что происходит при выполнении команд:
git add: Файлы и их текущие изменения из рабочей папки копируются в индекс (staging area). Они подготавливаются к коммиту.
git commit: Все изменения, которые находятся в индексе, permanently сохраняются в локальный репозиторий в виде нового коммита с уникальным хэшем.
git push: Локальные коммиты из вашего репозитория отправляются (загружаются) на удаленный репозиторий (например, на GitHub).
3. Почему важно писать информативные сообщения к коммитам?
Информативные сообщения (например, "Исправление ошибки расчета скидки для премиум-клиентов" вместо "Исправление") позволяют быстро понять, что и почему было изменено, не просматривая сам код. Это критически важно для командной работы, отладки и навигации по истории проекта.
4. Чем отличается git add имя_файла от git add .?
git add имя_файла: Добавляет в индекс только указанный файл. Полезно для точечного добавления изменений.
git add .: Добавляет в индекс все новые и измененные файлы в текущей директории и ее поддиректориях. Используется, когда вы хотите закоммитить все изменения разом.
5. Что показывает команда git status и как меняется ее вывод?
Она показывает состояние рабочей папки и индекса.
После изменения файла: В разделе Changes not staged for commit будут показаны измененные, но не добавленные в индекс файлы.
После git add: Эти файлы перемещаются в раздел Changes to be committed.
После git commit: Выводится nothing to commit, working tree clean (нечего коммитить, рабочая папка чиста).
6. Для чего нужна команда git remote add origin URL и что означает "origin"?
Эта команда связывает ваш локальный репозиторий с удаленным репозиторием по указанному URL.
"origin" — это стандартное условное имя (alias) для вашего основного удаленного репозитория. Его можно изменить, но "origin" используется по умолчанию.
7. Зачем нужен флаг -u в команде git push -u origin main при первой отправке?
Флаг -u (сокращение от --set-upstream) устанавливает связь между вашей локальной веткой main и удаленной веткой origin/main. После этого в дальнейшем можно использовать просто git push или git pull, и Git будет знать, с какой удаленной веткой работать.
8. Что такое ветка по умолчанию и какая у вас создалась?
Ветка по умолчанию — это основная ветка в репозитории, в которую обычно сливаются новые функции. Раньше использовалось название master, но сейчас по умолчанию создается main. Это важно, так как это основная ветка для разработки и сотрудничества.
9. Как просмотреть историю коммитов и какую информацию вы видите?
Командой git log. Для каждого коммита показывается:
Хэш коммита (уникальный идентификатор)
Автор
Дата
Сообщение коммита
10. Что произойдет, если сделать изменения в файле, но не выполнить git add перед git commit?
Эти изменения не попадут в коммит. Git коммитит только то, что было явно добавлено в индекс (staging area) с помощью git add.